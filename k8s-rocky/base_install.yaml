---
- name: prepair k8s cluster
  hosts: master, node
  become: true
  tasks:
#add repo for k8s and containerd
    - name: add repo for k8s
      ansible.builtin.yum_repository:
        name: kubernetes
        description: soft for k8s
        baseurl:
          - https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
        gpgkey:
          - https://packages.cloud.google.com/yum/doc/yum-key.gpg
          - https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        enabled: true
        gpgcheck: true
        state: present

    # - name: add repo for crio
    #   ansible.builtin.yum_repository:
    #     name: devel:kubic:libcontainers:stable:cri-o:1.26
    #     description: crio
    #     baseurl:
    #       - https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.26/CentOS_8/
    #     gpgkey:
    #       - https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.26/CentOS_8/repodata/repomd.xml.key
    #     enabled: true
    #     gpgcheck: true
    #     state: present

    - name: add repo for containerd
      ansible.builtin.yum_repository:
        name: containerd
        description: soft for CRI
        baseurl:
          - https://download.docker.com/linux/centos/$releasever/$basearch/stable
        gpgkey:
          - https://download.docker.com/linux/centos/gpg
        enabled: true
        gpgcheck: true
        state: present

    
  
  #Install req packages
    - name: install packages
      ansible.builtin.yum:
        name: "{{ soft_for_install }}"
        state: present
        update_cache: true
    
    - name: startes soft
      ansible.builtin.service:
        name: kubelet
        state: started
        enabled: true
        
  #Install python modules
    - name: Install kubernetes python package
      ansible.builtin.pip:
        name:  "{{ pip_modules }}"
  
  # Config system
 
    - name: disable firewall
      ansible.builtin.service:
        name: firewalld
        state: stopped
        enabled: false

    - name: Disable SELinux
      ansible.posix.selinux:
        state: disabled
    
    - name: load module
      community.general.modprobe:
        name: "{{ item }}"
        state: present
      loop: "{{ modules }}"

    # - name: set proc parametrs for istio
    #   ansible.builtin.blockinfile:
    #     path: /etc/modules-load.d/istio-iptables.conf 
    #     create: true
    #     block: |
    #       br_netfilter
    #       nf_nat
    #       xt_REDIRECT
    #       xt_owner
    #       iptable_nat
    #       iptable_mangle
    #       iptable_filter
          
          

    # - name: reload syctl parametrs
    #   ansible.builtin.shell:
    #     sysctl --system

    - name: set sysctl parametrs
      ansible.posix.sysctl:
        name:  "{{ item }}"
        state: present
        value: "1" 
        reload: true
      loop: "{{ sysctl_param }}"

    - name: set vm.max_map_count in 262144
      ansible.posix.sysctl:
        name: vm.max_map_count
        state: present
        value: "262144"
        reload: true
  
    - name: disable swap 
      ansible.builtin.shell:
        swapoff -a

    - name: remove swaw from fstab
      ansible.builtin.lineinfile:
        dest: /etc/fstab
        regexp: swap
        state: absent

    # - name: config containerd
    - name: update config containerd
      ansible.builtin.shell:
        containerd config default | sudo tee /etc/containerd/config.toml
      notify: restart containerd
    

# edit bashrc
    - name: bashrc edit
      ansible.builtin.blockinfile:  
        dest: /home/{{ user }}/.bashrc
        block: |
          source <(kubectl completion bash)
          alias k=kubectl
          complete -o default -F __start_kubectl k

# reboot system  
    - name: Unconditionally reboot the machine with all defaults
      ansible.builtin.reboot:
  
  handlers:
     - name: restart containerd
       ansible.builtin.systemd:
        name: containerd
        state: restarted
        daemon_reload: true
        enabled: true