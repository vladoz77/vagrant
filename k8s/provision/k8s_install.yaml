---
- name: install dependence
  hosts: all
  become: true
  tasks:
    - name: install req software
      ansible.builtin.apt:
        name: "{{ soft_dependences }}"
        state: present
        update_cache: true

    - name: install docker
      ansible.builtin.include_role:
        name: docker_install
        
    - name: disable swap 
      ansible.builtin.shell:
        swapoff -a

    - name: remove swaw from fstab
      ansible.builtin.lineinfile:
        dest: /etc/fstab
        regexp: swap
        state: absent
    
    - name: Configure persistent loading of modules
      ansible.builtin.blockinfile:
         create: true
         path: /etc/modules-load.d/k8s.conf
         block: |
             overlay
             br_netfilter

    - name: load module
      community.general.modprobe:
        name: "{{ item }}"
        state: present
      loop: "{{ modules }}"

    - name: set proc parametr
      ansible.builtin.blockinfile:
        path: /etc/sysctl.d/k8s.conf
        create: true
        block: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1

    - name: reload syctl parametrs
      ansible.builtin.shell:
        sysctl --system
        
  tags: install_dependences
      
- name: install kubeadm, kubelet on all node
  hosts: all
  become: true
  tasks:
    - name: add k8s apt key
      ansible.builtin.apt_key:
        url: "{{ k8s_url }}"
        state: present
        
    - name: add k8s repo
      ansible.builtin.apt_repository:
        repo: "{{ k8s_repo }}"
        state: present
        filename: 'kubernetes'
    
    - name: install soft
      ansible.builtin.apt:
        name: "{{ kube_soft_all }}"
        state: present
        update_cache: true
      notify: start service
    
   
  handlers:
     - name: start service
       ansible.builtin.service:
        name: kubelet
        state: started
        enabled: true
    

  tags: kube_all_setup

- name: install kubectl on master node
  hosts: master
  become: true
  # vars:
  #   soft_for_master: kubectl
  tasks:
    - name: install kubectl
      ansible.builtin.apt:
        name: "{{ soft_for_master }}"
        state: present

  tags: kube_master_setup
  
- name: install cluster
  ignore_errors: true
  hosts: master
  tasks:
    - name: check if cluster are running
      ansible.builtin.shell:
        ps -aux | grep kube-api | grep -v grep
      register: isrunning
      ignore_errors: true

    - name: cluster init
      ansible.builtin.shell:
        kubeadm init --apiserver-advertise-address={{ master_address }} --pod-network-cidr={{ cidr_network }}
      when: isrunning.rc != 0

  tags: kube_cluster_setup
      
- name: config cluster
  ignore_errors: true
  hosts: master
  tasks:
    - name: create .kube directory
      ansible.builtin.file:
        path: "{{ home_kube_dir }}"
        state: directory
        owner: "{{ name }}"
        group: "{{ name }}"

    - name: copy conf to .kube directory
      ansible.builtin.copy:
        src: "{{ base_kube_conf_dir }}"
        dest: /home/{{ name }}/.kube/config
        remote_src: true
        owner: "{{ name }}"
        group: "{{ name }}"
    
    - name: export env
      ansible.builtin.shell:
       echo export KUBECONFIG=$HOME/.kube/config
    
    - name: restart kubelet
      ansible.builtin.service:
        name: kubelet
        state: restarted
        enabled: true
    # - name: check if pod network exist
    #   become: false
    #   ansible.builtin.shell:
    #     kubectl get pod --all-namespaces
    #   register: network_exist

    - name: install pod network
      become: false
      ansible.builtin.shell:
         kubectl create -f {{ network_setup }}
  tags: config_cluster

- name: get token
  ignore_errors: true
  hosts: master
  tasks:
    - name: get token for joinnig pod
      ansible.builtin.shell:
        kubeadm token create --print-join-command
      register: kube_join_token
 
    - name: set fact
      ansible.builtin.set_fact:
        join_command: "{{kube_join_token.stdout_lines[0]}}"

- name: config node
  hosts: node
  become: true
  tasks:
    - ansible.builtin.shell:
        "{{hostvars[groups['master'] | join(',')]['join_command']}}"
      
  tags: config_node
          
         
      